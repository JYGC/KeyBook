@page "/userroles/{userid}"

@using KeyBook.Services
@using KeyBook.ViewModels

@inject NavigationManager NavManager
@inject UserRoleService UserRoleService

<h3>Manage Roles for @UserId</h3>
<br />
<div class="card">
    <div id="viewAll" class="card-body table-responsive">
        <input asp-for="@UserId" type="hidden" />
        @if (userRoles != null && userRoles.Count() > 0)
        {
            <table class="table table-striped" id="userRolesTable">
                <thead>
                    <tr>
                        <th>
                            Role
                        </th>
                        <th>
                            Status
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var userRole in userRoles)
                    {
                        <tr>
                            <td>
                                <input value="@userRole.RoleName" type="hidden" />
                                @userRole.RoleName
                            </td>
                            <td>
                                <div class="form-check m-1">
                                    <input type="checkbox" @bind="userRole.Selected" class="form-check-input" />
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <div class="col-sm-12" style=" padding: 20px 20px 0px 0px">
            <button id="save" class="btn bg-primary" @onclick="UpdateUserRolesForUser">
                <i class="fa fa-check"></i>
                Save
            </button>
        </div>
    </div>
</div>

@code {
    private List<UserRolesViewModel>? userRoles;

    [Parameter]
    public string? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId == null) return;
        userRoles = await UserRoleService.GetUserRolesByUserId(UserId);

        await base.OnInitializedAsync();
    }

    private async void UpdateUserRolesForUser()
    {
        bool success;
        string? errorMessage;

        if (UserId == null || userRoles == null) return;
        (success, errorMessage) = await UserRoleService.UpdateUserRolesForUser(UserId, new ManageUserRolesViewModel
        {
            UserId = UserId,
            UserRoles = userRoles
        });
        if (success) NavManager.NavigateTo("/user");
        Console.WriteLine(errorMessage);
    }
}
