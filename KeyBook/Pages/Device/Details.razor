@using KeyBook.Services
@using KeyBook.Models

@inject DeviceService DeviceService

<div class="form-group">
    <label for="name">Device Name:</label>
    <InputText id="name" @bind-Value=@__device.Name class="form-control" />
    <ValidationMessage For="() => __device.Name" />
</div>

<div class="form-group">
    <label for="identifier">Device Identifier:</label>
    <InputText id="identifier" @bind-Value=@__device.Identifier class="form-control" />
    <ValidationMessage For="() => __device.Identifier" />
</div>
@if (!__isNewDevice)
{
    <div class="form-group">
        <label for="defunctreason">Device Defunct Reason:</label>
        <InputSelect id="defunctreason" @bind-Value=@__device.DefunctReason TValue="Device.DeviceDefunctReason">
            @foreach (var deviceDefunctReason in __deviceDefunctReasons)
            {
                <option value="@deviceDefunctReason.Key">@deviceDefunctReason.Value</option>
            }
        </InputSelect>
    </div>
}
<div class="form-group">
    <label for="type">Device Type:</label>
    <InputSelect id="type" @bind-Value=@__device.Type TValue="Device.DeviceType" disabled="@(!__isNewDevice)">
        @foreach (var deviceType in __deviceTypes)
        {
            <option value="@deviceType.Key">@deviceType.Value</option>
        }
    </InputSelect>
</div>

@code {
    [Parameter]
    public Device Device
    {
        get => __device;
        set
        {
            if (__device == value) return;
            __device = value;
            DeviceChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<Device> DeviceChanged { get; set; }

    private bool __isNewDevice;
    private Dictionary<Enum, string> __deviceTypes = new();
    private Dictionary<Enum, string> __deviceDefunctReasons = new();

    private Device __device = new Device(); // Cannot be null to handle new devices

    protected override void OnInitialized()
    {
        base.OnInitialized();

        __deviceTypes = DeviceService.GetDeviceTypes();
        __deviceDefunctReasons = DeviceService.GetDeviceDefunctReason();
        __isNewDevice = Device.Id == Guid.Empty; // Devices have no Id until committed to DB
    }
}
