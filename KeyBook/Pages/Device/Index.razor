@page "/device"

@using KeyBook.Services
@using KeyBook.Models
@using KeyBook.Database
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc

@inject KeyBookDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<User> UserManager
@inject DeviceService DeviceService

<AuthorizeView>
    <Authorized>
        <div>
            <a href="/device/new">Add device</a>
        </div>
        <div>
            <input name="showDefunctedDevices" type="checkbox" checked="@showDefunctedDevices"
                   @onchange="ShowDefunctedDevicesChange" />
            <label for="showDefunctedDevices">Show defuncted devices</label>
        </div>
        <div>
            @if (deviceTypes != null && devices != null && devices.Count() > 0)
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Device Name</th>
                            <th>Device Identifier</th>
                            @if (showDefunctedDevices)
                            {
                                <th>Defuncted Reason</th>
                            }
                            <th>Type</th>
                            <th>Current holder</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Device device in devices)
                        {
                            <tr>
                                <td>@device.Name</td>
                                <td>@device.Identifier</td>
                                @if (showDefunctedDevices)
                                {
                                    <td>@((device.DefunctReason == Device.DeviceDefunctReason.None) ?
                                           "" : device.DefunctReason)</td>
                                }
                                <td>@deviceTypes[(int)@device.Type]</td>
                                <td>
                                    @if (device.PersonDevice != null && device.PersonDevice.Person != null)
                                    {
                                        @device.PersonDevice.Person.Name
                                    }
                                </td>
                                <td>
                                    <a href="/device/edit?deviceId=@device.Id">Details</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <label>No devices</label>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <meta http-equiv="Refresh" content="0; url='Identity/Account/Login'" />
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool showDefunctedDevices;
    private List<Device>? devices;
    private Dictionary<int, string>? deviceTypes;
    private Dictionary<int, string>? deviceDefunctStatus;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        deviceTypes = DeviceService.GetDeviceTypes();
        deviceDefunctStatus = DeviceService.GetDeviceDefunctReason();
        devices = await DeviceService.GetDevicesForUser(showDefunctedDevices);
    }

    public async Task ShowDefunctedDevicesChange(ChangeEventArgs e)
    {
        showDefunctedDevices = (e.Value == null) ? false : (bool)e.Value;
        devices = await DeviceService.GetDevicesForUser(showDefunctedDevices);
        StateHasChanged();
    }
}
